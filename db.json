{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/coffee.png","path":"img/coffee.png","modified":1,"renderable":0},{"_id":"source/img/post-default-min.jpg","path":"img/post-default-min.jpg","modified":1,"renderable":0},{"_id":"source/img/post-default.jpg","path":"img/post-default.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar-hux.jpg","path":"img/avatar-hux.jpg","modified":1,"renderable":0},{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":1,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a2da06df65f4723be82327cd1a8ca0069d1ab11c","modified":1471244109000},{"_id":"source/README.md","hash":"f1c093b659a97197b0e7ddbf7ec0ff45b5e5addf","modified":1471244109000},{"_id":"source/favicon.ico","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1471244109000},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1473045181000},{"_id":"themes/Anisina/README.md","hash":"feab09dfaa2212528428d850bb89db7b670113ba","modified":1473045181000},{"_id":"themes/Anisina/_config.yml","hash":"9d4d11a53c46502845f5f11c3ba2ccfa86b194fa","modified":1473045181000},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1473045181000},{"_id":"themes/Anisina/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473045181000},{"_id":"source/About/index.md","hash":"915fbbd465194fbf59542e31b458ed7917f83cbd","modified":1473047658000},{"_id":"source/Tags/index.md","hash":"83108e31eea7bbff8f4fbeda872dc65cdc51e5f7","modified":1471247021000},{"_id":"source/_posts/PHP安全 - SQL防注入.md","hash":"21638e586d7b73e43716d8c0ae4d7f7a85063888","modified":1474527385000},{"_id":"source/_posts/Laravel 5.3中使用Laravel Passport构建后端授权认证API.md","hash":"94610bd3586d464edf4b17df3db796b120dfc75b","modified":1479791280000},{"_id":"source/_posts/搭建Django应用（一）.md","hash":"828751fa09034fe8bef6dcb65b979678ad0b0852","modified":1471244109000},{"_id":"source/img/coffee.png","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1471244109000},{"_id":"source/img/post-default-min.jpg","hash":"c8c57d7b0a8dd3380f40871b002c8c01f73545ad","modified":1471244109000},{"_id":"themes/Anisina/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1473045181000},{"_id":"themes/Anisina/.git/config","hash":"d6c4362f9cacc8e3cc7270df3077e27c9bbcdf53","modified":1473045181000},{"_id":"themes/Anisina/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1473045174000},{"_id":"themes/Anisina/.git/index","hash":"090c408e1f839c859b895c314c7138de42625f22","modified":1473045181000},{"_id":"themes/Anisina/.git/packed-refs","hash":"bcce8ad571848fc3de0bf64bd38ba22eb87dca8d","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1473045181000},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1473045181000},{"_id":"themes/Anisina/layout/index.ejs","hash":"9e910a5b1d6ad8a70102f7acee10f4de1f46b077","modified":1473045181000},{"_id":"themes/Anisina/layout/layout.ejs","hash":"9d3d82a707b107f42db34ef5a8016693da2be742","modified":1473045181000},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"aa52ac74cff84caa85563e98c65bdd089c6d0cba","modified":1473045181000},{"_id":"themes/Anisina/layout/tags.ejs","hash":"9a5bbfcd8d729d20819423c156db24d33c0cab33","modified":1473045181000},{"_id":"themes/Anisina/layout/post.ejs","hash":"7fb92dded77dddd0393f8fd92cef7bb6123728a6","modified":1473045181000},{"_id":"themes/Anisina/layout/page.ejs","hash":"2f106c71e728e8d735dd4be6a6fc0088d74e0946","modified":1473057231000},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1473045181000},{"_id":"source/img/post-default.jpg","hash":"77906a3be30936d775246a09cb70bccdb6eb7710","modified":1471244109000},{"_id":"source/img/avatar-hux.jpg","hash":"9a057b22a964f4d03519bbdb2dc9e360d37ee4e4","modified":1471244109000},{"_id":"themes/Anisina/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1473045174000},{"_id":"themes/Anisina/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1473045174000},{"_id":"themes/Anisina/.git/logs/HEAD","hash":"970da02f23f47cb4504ab177d4aeb1b064953034","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"223a29b0154c2dcc5f8a6b6fee67ef78ead266ad","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"07fd0760db89b12b0005209747c611b9ba8110db","modified":1473045181000},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"b99f671000c3c42e57043f218a4096194591b0e7","modified":1473045181000},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1473045181000},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1473045181000},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1473045181000},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1473045181000},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1473045181000},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1473045181000},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1473045181000},{"_id":"themes/Anisina/.git/objects/pack/pack-34bc65b13a6d4613ea712c2ac03d9cda3db0f78c.idx","hash":"cfb6f357f588227837dcac22ca440807ef03ae6d","modified":1473045181000},{"_id":"themes/Anisina/.git/refs/heads/master","hash":"91107a360c7ec009bed6a4147a9bfcb18df6ee7f","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1473045181000},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1473045181000},{"_id":"themes/Anisina/.git/logs/refs/heads/master","hash":"970da02f23f47cb4504ab177d4aeb1b064953034","modified":1473045181000},{"_id":"themes/Anisina/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1473045181000},{"_id":"themes/Anisina/.git/logs/refs/remotes/origin/HEAD","hash":"970da02f23f47cb4504ab177d4aeb1b064953034","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1473045181000},{"_id":"themes/Anisina/.git/objects/pack/pack-34bc65b13a6d4613ea712c2ac03d9cda3db0f78c.pack","hash":"d999c31509f411dd37556443ff07c20845d9e807","modified":1473045181000},{"_id":"public/atom.xml","hash":"be4bf6a11ece575afd219e7af65b848da3e1170a","modified":1479809918122},{"_id":"public/sitemap.xml","hash":"60627bd88a5073d49cc3ca1fabe2ce86fa49403b","modified":1479809918122},{"_id":"public/About/index.html","hash":"b54d13b40b75b6ae39afd4bdfa1d86f563aa6658","modified":1479809918320},{"_id":"public/Tags/index.html","hash":"b263c4786278878987b30f5d6604e7c2f9c57052","modified":1479809918320},{"_id":"public/2016/08/15/搭建Django应用（一）/index.html","hash":"29280d44fe27bf606d63bfdfae50ec8bcd57b6e9","modified":1479809918321},{"_id":"public/archives/index.html","hash":"75dcac0357743a305ed26525598e0fef7f83c1d5","modified":1479809918321},{"_id":"public/archives/2016/index.html","hash":"58f6ca5ba51e6bb4baff5632843056ac2f7e733c","modified":1479809918321},{"_id":"public/archives/2016/08/index.html","hash":"dca4802d8ecd5c1dbaf605f9018c0ed906576f26","modified":1479809918324},{"_id":"public/archives/2016/11/index.html","hash":"0a24ea71711e1d92debdd97aab4aae816cd2a812","modified":1479809918324},{"_id":"public/tags/php/index.html","hash":"094da7c527fe3b0792403619581a8f4b336b172e","modified":1479809918324},{"_id":"public/tags/安全/index.html","hash":"e8b9f349ad3bf272ef046a47eee01c4eb62c2536","modified":1479809918324},{"_id":"public/tags/CodeIgniter/index.html","hash":"0af9eabdb1c00ff813c3580c3ec332b37fc20be9","modified":1479809918324},{"_id":"public/tags/laravel/index.html","hash":"4c83a2a1288bddf912b0f56655533fbafc7f71c5","modified":1479809918324},{"_id":"public/tags/python/index.html","hash":"a6bdda63975e7c96e4b94be2cc45667410600b7c","modified":1479809918325},{"_id":"public/tags/Django/index.html","hash":"08ffcbe041c7c539b6bb8a3987f7c332280533f3","modified":1479809918325},{"_id":"public/2016/11/22/Laravel 5.3中使用Laravel Passport构建后端授权认证API/index.html","hash":"381c348cd113ca14c0c1b11def63e45ad8199650","modified":1479809918325},{"_id":"public/2016/08/15/PHP安全 - SQL防注入/index.html","hash":"a7fae24b080d51b9e7307ac38acfbaf14e452da2","modified":1479809918325},{"_id":"public/index.html","hash":"1d85895c04ee9a2dc6d17f4403e1af05cabf4843","modified":1479809918325},{"_id":"public/CNAME","hash":"a2da06df65f4723be82327cd1a8ca0069d1ab11c","modified":1479809918325},{"_id":"public/README.md","hash":"f1c093b659a97197b0e7ddbf7ec0ff45b5e5addf","modified":1479809918325},{"_id":"public/favicon.ico","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1479809918325},{"_id":"public/img/coffee.png","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1479809918325},{"_id":"public/img/post-default-min.jpg","hash":"c8c57d7b0a8dd3380f40871b002c8c01f73545ad","modified":1479809918325},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1479809918325},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1479809918325},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1479809918326},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1479809918326},{"_id":"public/img/post-default.jpg","hash":"77906a3be30936d775246a09cb70bccdb6eb7710","modified":1479809918449},{"_id":"public/img/avatar-hux.jpg","hash":"9a057b22a964f4d03519bbdb2dc9e360d37ee4e4","modified":1479809918450},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1479809918454},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1479809918457},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1479809918458},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1479809918458},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1479809918458},{"_id":"public/css/blog-style.css","hash":"b99f671000c3c42e57043f218a4096194591b0e7","modified":1479809918458},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1479809918458},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1479809918458},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479809918458},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1479809918459}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"page","date":"2016-09-05T02:37:52.000Z","_content":"## Thankuu(Wu Sheng Kai)\n### 渣渣web程序猿一枚（广州）\n## 技能树：\n\n    php      ---  laravel|codeigniter\n    js       ---  vue.js|node|express\n    python   ---  Django\n    other    ---  Docker|Nginx|Apache\n","source":"About/index.md","raw":"---\ntitle: About\nlayout: page\ndate: 2016-09-05 10:37:52\n---\n## Thankuu(Wu Sheng Kai)\n### 渣渣web程序猿一枚（广州）\n## 技能树：\n\n    php      ---  laravel|codeigniter\n    js       ---  vue.js|node|express\n    python   ---  Django\n    other    ---  Docker|Nginx|Apache\n","updated":"2016-09-05T03:54:18.000Z","path":"About/index.html","comments":1,"_id":"civtcm88g0000rp9kdrf8p98i","content":"<h2>Thankuu(Wu Sheng Kai)</h2>\n<h3>渣渣web程序猿一枚（广州）</h3>\n<h2>技能树：</h2>\n<pre><code>php      ---  laravel|codeigniter\njs       ---  vue.js|node|express\npython   ---  Django\nother    ---  Docker|Nginx|Apache\n</code></pre>\n","excerpt":"","more":"<h2>Thankuu(Wu Sheng Kai)</h2>\n<h3>渣渣web程序猿一枚（广州）</h3>\n<h2>技能树：</h2>\n<pre><code>php      ---  laravel|codeigniter\njs       ---  vue.js|node|express\npython   ---  Django\nother    ---  Docker|Nginx|Apache\n</code></pre>\n"},{"title":"Tags","layout":"tags","date":"2016-08-15T07:42:50.000Z","_content":"","source":"Tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\ndate: 2016-08-15 15:42:50\n---","updated":"2016-08-15T07:43:41.000Z","path":"Tags/index.html","comments":1,"_id":"civtcm88m0002rp9kdawicftx","content":"","excerpt":"","more":""}],"Post":[{"title":"PHP安全 - SQL防注入","_content":"### 1、表单校验\n这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以`CodeIgniter`举例,官方给的示例是：\n\n\n    public function index()\n    {\n        $this->load->helper(array('form', 'url'));\n\n        $this->load->library('form_validation');\n\n        $this->form_validation->set_rules('username', 'Username', 'callback_username_check');\n\n    $this->form_validation->set_rules('password', 'Password', 'required');\n\n        $this->form_validation->set_rules('passconf', 'Password Confirmation', 'required');\n\n    $this->form_validation->set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n        if ($this->form_validation->run() == FALSE)\n    {\n        $this->load->view('myform');\n    }\n    else\n    {\n        $this->load->view('formsuccess');\n        }\n    }\n\n这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。\n\n### 2、过滤特殊符号\n在所有攻击中，可以通过对表单数据过滤特殊符号` \\ , ' , \" `来预防SQL注入攻击。假设我们可以通过这样一个链接`http://dev.com/index.php?user_name=thankuu`向服务器请求这个用户的信息，如果`username`是合法的，那么服务器会执行这样的SQL语句：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n\n但是，如果我们在向服务器请求的内容中加入这样的内容：`thankuu' UNION SELECT username,password FROM table.user-- `，那么服务器最终会执行的SQL语句将会变为：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n\n执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。\n\n为了防范这种方式的注入以及插入`<script>`脚本代码，我们可以在php代码中使用`addslashes`函数，将以上特殊符号进行转意，并将原有SQL语句：\n\n\n    SELECT * FROM table WHERE var={$var};\n\n替换成\n\n    SELECT * FROM table WHERE var='{$var}';\n\n我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成`\\\\,\\',\\\"`,，所以想要执行的注入攻击就会失效。\n\n### 3、绑定变量，使用预编译语句\nMySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：\n\n\n    $sql = \"SELECT * FROM table WHERE var=? and var2=?\";\n\n    $result = $this->db->query($sql,array($array1,$array2))->result_array();\n\n更多使用方法可以参考官方使用手册。\n","source":"_posts/PHP安全 - SQL防注入.md","raw":"---\ntitle: \"PHP安全 - SQL防注入\"\ntags:\n    - php\n    - 安全\n    - CodeIgniter\n    \n---\n### 1、表单校验\n这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以`CodeIgniter`举例,官方给的示例是：\n\n\n    public function index()\n    {\n        $this->load->helper(array('form', 'url'));\n\n        $this->load->library('form_validation');\n\n        $this->form_validation->set_rules('username', 'Username', 'callback_username_check');\n\n    $this->form_validation->set_rules('password', 'Password', 'required');\n\n        $this->form_validation->set_rules('passconf', 'Password Confirmation', 'required');\n\n    $this->form_validation->set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n        if ($this->form_validation->run() == FALSE)\n    {\n        $this->load->view('myform');\n    }\n    else\n    {\n        $this->load->view('formsuccess');\n        }\n    }\n\n这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。\n\n### 2、过滤特殊符号\n在所有攻击中，可以通过对表单数据过滤特殊符号` \\ , ' , \" `来预防SQL注入攻击。假设我们可以通过这样一个链接`http://dev.com/index.php?user_name=thankuu`向服务器请求这个用户的信息，如果`username`是合法的，那么服务器会执行这样的SQL语句：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n\n但是，如果我们在向服务器请求的内容中加入这样的内容：`thankuu' UNION SELECT username,password FROM table.user-- `，那么服务器最终会执行的SQL语句将会变为：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n\n执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。\n\n为了防范这种方式的注入以及插入`<script>`脚本代码，我们可以在php代码中使用`addslashes`函数，将以上特殊符号进行转意，并将原有SQL语句：\n\n\n    SELECT * FROM table WHERE var={$var};\n\n替换成\n\n    SELECT * FROM table WHERE var='{$var}';\n\n我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成`\\\\,\\',\\\"`,，所以想要执行的注入攻击就会失效。\n\n### 3、绑定变量，使用预编译语句\nMySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：\n\n\n    $sql = \"SELECT * FROM table WHERE var=? and var2=?\";\n\n    $result = $this->db->query($sql,array($array1,$array2))->result_array();\n\n更多使用方法可以参考官方使用手册。\n","slug":"PHP安全 - SQL防注入","published":1,"date":"2016-08-15T06:55:09.000Z","updated":"2016-09-22T06:56:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civtcm88i0001rp9kg5crz3ke","content":"<h3>1、表单校验</h3>\n<p>这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以<code>CodeIgniter</code>举例,官方给的示例是：</p>\n<pre><code>public function index()\n{\n    $this-&gt;load-&gt;helper(array('form', 'url'));\n\n    $this-&gt;load-&gt;library('form_validation');\n\n    $this-&gt;form_validation-&gt;set_rules('username', 'Username', 'callback_username_check');\n\n$this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required');\n\n    $this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required');\n\n$this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n    if ($this-&gt;form_validation-&gt;run() == FALSE)\n{\n    $this-&gt;load-&gt;view('myform');\n}\nelse\n{\n    $this-&gt;load-&gt;view('formsuccess');\n    }\n}\n</code></pre>\n<p>这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。</p>\n<h3>2、过滤特殊符号</h3>\n<p>在所有攻击中，可以通过对表单数据过滤特殊符号<code>\\ , ' , &quot;</code>来预防SQL注入攻击。假设我们可以通过这样一个链接<code>http://dev.com/index.php?user_name=thankuu</code>向服务器请求这个用户的信息，如果<code>username</code>是合法的，那么服务器会执行这样的SQL语句：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n</code></pre>\n<p>但是，如果我们在向服务器请求的内容中加入这样的内容：<code>thankuu' UNION SELECT username,password FROM table.user--</code>，那么服务器最终会执行的SQL语句将会变为：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n</code></pre>\n<p>执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。</p>\n<p>为了防范这种方式的注入以及插入<code>&lt;script&gt;</code>脚本代码，我们可以在php代码中使用<code>addslashes</code>函数，将以上特殊符号进行转意，并将原有SQL语句：</p>\n<pre><code>SELECT * FROM table WHERE var={$var};\n</code></pre>\n<p>替换成</p>\n<pre><code>SELECT * FROM table WHERE var='{$var}';\n</code></pre>\n<p>我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成<code>\\\\,\\',\\&quot;</code>,，所以想要执行的注入攻击就会失效。</p>\n<h3>3、绑定变量，使用预编译语句</h3>\n<p>MySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：</p>\n<pre><code>$sql = &quot;SELECT * FROM table WHERE var=? and var2=?&quot;;\n\n$result = $this-&gt;db-&gt;query($sql,array($array1,$array2))-&gt;result_array();\n</code></pre>\n<p>更多使用方法可以参考官方使用手册。</p>\n","excerpt":"","more":"<h3>1、表单校验</h3>\n<p>这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以<code>CodeIgniter</code>举例,官方给的示例是：</p>\n<pre><code>public function index()\n{\n    $this-&gt;load-&gt;helper(array('form', 'url'));\n\n    $this-&gt;load-&gt;library('form_validation');\n\n    $this-&gt;form_validation-&gt;set_rules('username', 'Username', 'callback_username_check');\n\n$this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required');\n\n    $this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required');\n\n$this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n    if ($this-&gt;form_validation-&gt;run() == FALSE)\n{\n    $this-&gt;load-&gt;view('myform');\n}\nelse\n{\n    $this-&gt;load-&gt;view('formsuccess');\n    }\n}\n</code></pre>\n<p>这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。</p>\n<h3>2、过滤特殊符号</h3>\n<p>在所有攻击中，可以通过对表单数据过滤特殊符号<code>\\ , ' , &quot;</code>来预防SQL注入攻击。假设我们可以通过这样一个链接<code>http://dev.com/index.php?user_name=thankuu</code>向服务器请求这个用户的信息，如果<code>username</code>是合法的，那么服务器会执行这样的SQL语句：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n</code></pre>\n<p>但是，如果我们在向服务器请求的内容中加入这样的内容：<code>thankuu' UNION SELECT username,password FROM table.user--</code>，那么服务器最终会执行的SQL语句将会变为：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n</code></pre>\n<p>执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。</p>\n<p>为了防范这种方式的注入以及插入<code>&lt;script&gt;</code>脚本代码，我们可以在php代码中使用<code>addslashes</code>函数，将以上特殊符号进行转意，并将原有SQL语句：</p>\n<pre><code>SELECT * FROM table WHERE var={$var};\n</code></pre>\n<p>替换成</p>\n<pre><code>SELECT * FROM table WHERE var='{$var}';\n</code></pre>\n<p>我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成<code>\\\\,\\',\\&quot;</code>,，所以想要执行的注入攻击就会失效。</p>\n<h3>3、绑定变量，使用预编译语句</h3>\n<p>MySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：</p>\n<pre><code>$sql = &quot;SELECT * FROM table WHERE var=? and var2=?&quot;;\n\n$result = $this-&gt;db-&gt;query($sql,array($array1,$array2))-&gt;result_array();\n</code></pre>\n<p>更多使用方法可以参考官方使用手册。</p>\n"},{"title":"Laravel 5.3中使用Laravel Passport构建后端授权认证API","_content":"Laravel在5.3中引入了新的官方OAuth扩展Laravel Passport，之前在5.1/5.2时一直是用dingo+jwt这一套来构建后端api，最近正好要构建新项目，想着试试官方这一个拓展如何。\n## 安装\n官方文档中有完整的安装调用过程，使用composer：\n\n    composer require laravel/passport\n像使用其他组件一样，我们需要在`config/app/php`的`providers`数组中注册Passport：\n\n    Laravel\\Passport\\PassportServiceProvider::class,\n然后我们需要执行`migrate`创建相关的客户端数据表和令牌数据表,和`passport:install`来生成一些加密秘钥等，这些在官方文档中都有详细介绍。\n## 构建认证函数\n官方文档中针对如何简单使用做了初步介绍，下面我试着构造一个完整的客户端授权流程，首先创建`ApiController`：\n\n    php artisen make:controller Apicontroller\n在`ApiController`中引入`AuthenticatesUsers`模块：\n\n    <?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n    use Illuminate\\Http\\Request;\n\n    class ApiController extends Controller\n    {\n        use  AuthenticatesUsers;\n\n    public function __construct()\n    {\n        $this->middleware('api');\n    }\n我们的客户端需要通过密码授权的方式来认证，我们需要在`ApiController`中重写`AuthenticatesUsers`部分功能函数来实现整个完整的授权流程,在这里我们调用Passport提供的`oauth/token`接口：\n\n    //调用认证接口获取授权码\n    protected function authenticateClient(Request $request)\n    {\n        $credentials = $this->credentials($request);\n\n        $data = $request->all();\n\n        $request->request->add([\n            'grant_type' => $data['grant_type'],\n            'client_id' => $data['client_id'],\n            'client_secret' => $data['client_secret'],\n            'username' => $credentials['phone'],\n            'password' => $credentials['password'],\n            'scope' => ''\n        ]);\n\n        $proxy = Request::create(\n            'oauth/token',\n            'POST'\n        );\n\n        $response = \\Route::dispatch($proxy);\n\n        return $response;\n    }\n    //以下为重写部分\n    protected function authenticated(Request $request)\n    {\n        return $this->authenticateClient($request);\n    }\n\n    protected function sendLoginResponse(Request $request)\n    {\n        $this->clearLoginAttempts($request);\n\n        return $this->authenticated($request);\n    }\n\n    protected function sendFailedLoginResponse(Request $request)\n    {\n        $msg = $request['errors'];\n        $code = $request['code'];\n        return $this->failed($msg,$code);\n    }\n在这里我们会遇到一个问题，官方文档中没有提及，就是我们要如何使用自定的用户名进行授权，找寻源码，其实在`Laravel\\Passport\\Bridge\\UserRepository.php`的`getUserEntityByUserCredentials()`函数中会看到这段代码：\n\n    if (method_exists($model, 'findForPassport')) {\n        $user = (new $model)->findForPassport($username);\n    } else {\n        $user = (new $model)->where('email', $username)->first();\n    }\n我们只需要在我们配置在config/auth.php的模型中添加这段代码就可以完成自定义授权用户名：\n\n     public function findForPassport($username) {\n        return $this->where('phone', $username)->first();\n    }\n这样一个授权流程基本完成，接下来创建一个`Api/LoginController`:\n\n    <?php\n\n    namespace App\\Http\\Controllers\\Api;\n\n    use App\\Http\\Controllers\\ApiController;\n    use Illuminate\\Http\\Request;\n    use App\\Models\\User;                \\\\User.php我移动到了Models目录\n    use Validator;\n\n    class LoginController extends ApiController\n    {\n        // 登录用户名标示为phone字段\n        public function username()\n        {\n            return 'phone';\n        }\n        //登录接口，调用了ApiController中一些其他函数succeed\\failed，上文未提及，用于接口格式化输出\n        public function login(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'phone'    => 'required|exists:users',\n            'password' => 'required|between:6,32',\n            ]);\n\n            if ($validator->fails()) {\n            $request->request->add([\n                'errors' => $validator->errors()->toArray(),\n                'code' => 401,\n                ]);                     \n            return $this->sendFailedLoginResponse($request);\n        }\n\n        $credentials = $this->credentials($request);\n\n        if ($this->guard('api')->attempt($credentials, $request->has('remember'))) {\n            return $this->sendLoginResponse($request);\n        }\n\n        return $this->failed('login failed',401);\n        }\n    }\n## 构建路由    \n最后`routes/api.php`中加入我们需要的路由：\n\n    Route::group([\n        'prefix'=>'/v1',\n        'middleware' => ['api']\n    ], function () {\n        Route::post('/user/login','Api\\LoginController@login');\n    });\n## 测试    \n最后在postmen中调用接口：\n![image_1b2543doiq521a5c17lh1h3k14ve9.png-81.7kB][1]\n\n\n  [1]: http://static.zybuluo.com/thankuu/gcptj01cj4f3zk3mtrnbm82k/image_1b2543doiq521a5c17lh1h3k14ve9.png\n  结果正确返回。\n","source":"_posts/Laravel 5.3中使用Laravel Passport构建后端授权认证API.md","raw":"---\ntitle: \"Laravel 5.3中使用Laravel Passport构建后端授权认证API\"\ntags:\n    - laravel\n    - php\n\n---\nLaravel在5.3中引入了新的官方OAuth扩展Laravel Passport，之前在5.1/5.2时一直是用dingo+jwt这一套来构建后端api，最近正好要构建新项目，想着试试官方这一个拓展如何。\n## 安装\n官方文档中有完整的安装调用过程，使用composer：\n\n    composer require laravel/passport\n像使用其他组件一样，我们需要在`config/app/php`的`providers`数组中注册Passport：\n\n    Laravel\\Passport\\PassportServiceProvider::class,\n然后我们需要执行`migrate`创建相关的客户端数据表和令牌数据表,和`passport:install`来生成一些加密秘钥等，这些在官方文档中都有详细介绍。\n## 构建认证函数\n官方文档中针对如何简单使用做了初步介绍，下面我试着构造一个完整的客户端授权流程，首先创建`ApiController`：\n\n    php artisen make:controller Apicontroller\n在`ApiController`中引入`AuthenticatesUsers`模块：\n\n    <?php\n\n    namespace App\\Http\\Controllers;\n\n    use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n    use Illuminate\\Http\\Request;\n\n    class ApiController extends Controller\n    {\n        use  AuthenticatesUsers;\n\n    public function __construct()\n    {\n        $this->middleware('api');\n    }\n我们的客户端需要通过密码授权的方式来认证，我们需要在`ApiController`中重写`AuthenticatesUsers`部分功能函数来实现整个完整的授权流程,在这里我们调用Passport提供的`oauth/token`接口：\n\n    //调用认证接口获取授权码\n    protected function authenticateClient(Request $request)\n    {\n        $credentials = $this->credentials($request);\n\n        $data = $request->all();\n\n        $request->request->add([\n            'grant_type' => $data['grant_type'],\n            'client_id' => $data['client_id'],\n            'client_secret' => $data['client_secret'],\n            'username' => $credentials['phone'],\n            'password' => $credentials['password'],\n            'scope' => ''\n        ]);\n\n        $proxy = Request::create(\n            'oauth/token',\n            'POST'\n        );\n\n        $response = \\Route::dispatch($proxy);\n\n        return $response;\n    }\n    //以下为重写部分\n    protected function authenticated(Request $request)\n    {\n        return $this->authenticateClient($request);\n    }\n\n    protected function sendLoginResponse(Request $request)\n    {\n        $this->clearLoginAttempts($request);\n\n        return $this->authenticated($request);\n    }\n\n    protected function sendFailedLoginResponse(Request $request)\n    {\n        $msg = $request['errors'];\n        $code = $request['code'];\n        return $this->failed($msg,$code);\n    }\n在这里我们会遇到一个问题，官方文档中没有提及，就是我们要如何使用自定的用户名进行授权，找寻源码，其实在`Laravel\\Passport\\Bridge\\UserRepository.php`的`getUserEntityByUserCredentials()`函数中会看到这段代码：\n\n    if (method_exists($model, 'findForPassport')) {\n        $user = (new $model)->findForPassport($username);\n    } else {\n        $user = (new $model)->where('email', $username)->first();\n    }\n我们只需要在我们配置在config/auth.php的模型中添加这段代码就可以完成自定义授权用户名：\n\n     public function findForPassport($username) {\n        return $this->where('phone', $username)->first();\n    }\n这样一个授权流程基本完成，接下来创建一个`Api/LoginController`:\n\n    <?php\n\n    namespace App\\Http\\Controllers\\Api;\n\n    use App\\Http\\Controllers\\ApiController;\n    use Illuminate\\Http\\Request;\n    use App\\Models\\User;                \\\\User.php我移动到了Models目录\n    use Validator;\n\n    class LoginController extends ApiController\n    {\n        // 登录用户名标示为phone字段\n        public function username()\n        {\n            return 'phone';\n        }\n        //登录接口，调用了ApiController中一些其他函数succeed\\failed，上文未提及，用于接口格式化输出\n        public function login(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'phone'    => 'required|exists:users',\n            'password' => 'required|between:6,32',\n            ]);\n\n            if ($validator->fails()) {\n            $request->request->add([\n                'errors' => $validator->errors()->toArray(),\n                'code' => 401,\n                ]);                     \n            return $this->sendFailedLoginResponse($request);\n        }\n\n        $credentials = $this->credentials($request);\n\n        if ($this->guard('api')->attempt($credentials, $request->has('remember'))) {\n            return $this->sendLoginResponse($request);\n        }\n\n        return $this->failed('login failed',401);\n        }\n    }\n## 构建路由    \n最后`routes/api.php`中加入我们需要的路由：\n\n    Route::group([\n        'prefix'=>'/v1',\n        'middleware' => ['api']\n    ], function () {\n        Route::post('/user/login','Api\\LoginController@login');\n    });\n## 测试    \n最后在postmen中调用接口：\n![image_1b2543doiq521a5c17lh1h3k14ve9.png-81.7kB][1]\n\n\n  [1]: http://static.zybuluo.com/thankuu/gcptj01cj4f3zk3mtrnbm82k/image_1b2543doiq521a5c17lh1h3k14ve9.png\n  结果正确返回。\n","slug":"Laravel 5.3中使用Laravel Passport构建后端授权认证API","published":1,"date":"2016-11-22T04:19:32.000Z","updated":"2016-11-22T05:08:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civtcm88n0003rp9k65k9pf92","content":"<p>Laravel在5.3中引入了新的官方OAuth扩展Laravel Passport，之前在5.1/5.2时一直是用dingo+jwt这一套来构建后端api，最近正好要构建新项目，想着试试官方这一个拓展如何。</p>\n<h2>安装</h2>\n<p>官方文档中有完整的安装调用过程，使用composer：</p>\n<pre><code>composer require laravel/passport\n</code></pre>\n<p>像使用其他组件一样，我们需要在<code>config/app/php</code>的<code>providers</code>数组中注册Passport：</p>\n<pre><code>Laravel\\Passport\\PassportServiceProvider::class,\n</code></pre>\n<p>然后我们需要执行<code>migrate</code>创建相关的客户端数据表和令牌数据表,和<code>passport:install</code>来生成一些加密秘钥等，这些在官方文档中都有详细介绍。</p>\n<h2>构建认证函数</h2>\n<p>官方文档中针对如何简单使用做了初步介绍，下面我试着构造一个完整的客户端授权流程，首先创建<code>ApiController</code>：</p>\n<pre><code>php artisen make:controller Apicontroller\n</code></pre>\n<p>在<code>ApiController</code>中引入<code>AuthenticatesUsers</code>模块：</p>\n<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\nuse Illuminate\\Http\\Request;\n\nclass ApiController extends Controller\n{\n    use  AuthenticatesUsers;\n\npublic function __construct()\n{\n    $this-&gt;middleware('api');\n}\n</code></pre>\n<p>我们的客户端需要通过密码授权的方式来认证，我们需要在<code>ApiController</code>中重写<code>AuthenticatesUsers</code>部分功能函数来实现整个完整的授权流程,在这里我们调用Passport提供的<code>oauth/token</code>接口：</p>\n<pre><code>//调用认证接口获取授权码\nprotected function authenticateClient(Request $request)\n{\n    $credentials = $this-&gt;credentials($request);\n\n    $data = $request-&gt;all();\n\n    $request-&gt;request-&gt;add([\n        'grant_type' =&gt; $data['grant_type'],\n        'client_id' =&gt; $data['client_id'],\n        'client_secret' =&gt; $data['client_secret'],\n        'username' =&gt; $credentials['phone'],\n        'password' =&gt; $credentials['password'],\n        'scope' =&gt; ''\n    ]);\n\n    $proxy = Request::create(\n        'oauth/token',\n        'POST'\n    );\n\n    $response = \\Route::dispatch($proxy);\n\n    return $response;\n}\n//以下为重写部分\nprotected function authenticated(Request $request)\n{\n    return $this-&gt;authenticateClient($request);\n}\n\nprotected function sendLoginResponse(Request $request)\n{\n    $this-&gt;clearLoginAttempts($request);\n\n    return $this-&gt;authenticated($request);\n}\n\nprotected function sendFailedLoginResponse(Request $request)\n{\n    $msg = $request['errors'];\n    $code = $request['code'];\n    return $this-&gt;failed($msg,$code);\n}\n</code></pre>\n<p>在这里我们会遇到一个问题，官方文档中没有提及，就是我们要如何使用自定的用户名进行授权，找寻源码，其实在<code>Laravel\\Passport\\Bridge\\UserRepository.php</code>的<code>getUserEntityByUserCredentials()</code>函数中会看到这段代码：</p>\n<pre><code>if (method_exists($model, 'findForPassport')) {\n    $user = (new $model)-&gt;findForPassport($username);\n} else {\n    $user = (new $model)-&gt;where('email', $username)-&gt;first();\n}\n</code></pre>\n<p>我们只需要在我们配置在config/auth.php的模型中添加这段代码就可以完成自定义授权用户名：</p>\n<pre><code> public function findForPassport($username) {\n    return $this-&gt;where('phone', $username)-&gt;first();\n}\n</code></pre>\n<p>这样一个授权流程基本完成，接下来创建一个<code>Api/LoginController</code>:</p>\n<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\ApiController;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\User;                \\\\User.php我移动到了Models目录\nuse Validator;\n\nclass LoginController extends ApiController\n{\n    // 登录用户名标示为phone字段\n    public function username()\n    {\n        return 'phone';\n    }\n    //登录接口，调用了ApiController中一些其他函数succeed\\failed，上文未提及，用于接口格式化输出\n    public function login(Request $request)\n{\n    $validator = Validator::make($request-&gt;all(), [\n        'phone'    =&gt; 'required|exists:users',\n        'password' =&gt; 'required|between:6,32',\n        ]);\n\n        if ($validator-&gt;fails()) {\n        $request-&gt;request-&gt;add([\n            'errors' =&gt; $validator-&gt;errors()-&gt;toArray(),\n            'code' =&gt; 401,\n            ]);                     \n        return $this-&gt;sendFailedLoginResponse($request);\n    }\n\n    $credentials = $this-&gt;credentials($request);\n\n    if ($this-&gt;guard('api')-&gt;attempt($credentials, $request-&gt;has('remember'))) {\n        return $this-&gt;sendLoginResponse($request);\n    }\n\n    return $this-&gt;failed('login failed',401);\n    }\n}\n</code></pre>\n<h2>构建路由</h2>\n<p>最后<code>routes/api.php</code>中加入我们需要的路由：</p>\n<pre><code>Route::group([\n    'prefix'=&gt;'/v1',\n    'middleware' =&gt; ['api']\n], function () {\n    Route::post('/user/login','Api\\LoginController@login');\n});\n</code></pre>\n<h2>测试</h2>\n<p>最后在postmen中调用接口：\n<img src=\"http://static.zybuluo.com/thankuu/gcptj01cj4f3zk3mtrnbm82k/image_1b2543doiq521a5c17lh1h3k14ve9.png\" alt=\"image_1b2543doiq521a5c17lh1h3k14ve9.png-81.7kB\"></p>\n<p>结果正确返回。</p>\n","excerpt":"","more":"<p>Laravel在5.3中引入了新的官方OAuth扩展Laravel Passport，之前在5.1/5.2时一直是用dingo+jwt这一套来构建后端api，最近正好要构建新项目，想着试试官方这一个拓展如何。</p>\n<h2>安装</h2>\n<p>官方文档中有完整的安装调用过程，使用composer：</p>\n<pre><code>composer require laravel/passport\n</code></pre>\n<p>像使用其他组件一样，我们需要在<code>config/app/php</code>的<code>providers</code>数组中注册Passport：</p>\n<pre><code>Laravel\\Passport\\PassportServiceProvider::class,\n</code></pre>\n<p>然后我们需要执行<code>migrate</code>创建相关的客户端数据表和令牌数据表,和<code>passport:install</code>来生成一些加密秘钥等，这些在官方文档中都有详细介绍。</p>\n<h2>构建认证函数</h2>\n<p>官方文档中针对如何简单使用做了初步介绍，下面我试着构造一个完整的客户端授权流程，首先创建<code>ApiController</code>：</p>\n<pre><code>php artisen make:controller Apicontroller\n</code></pre>\n<p>在<code>ApiController</code>中引入<code>AuthenticatesUsers</code>模块：</p>\n<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\nuse Illuminate\\Http\\Request;\n\nclass ApiController extends Controller\n{\n    use  AuthenticatesUsers;\n\npublic function __construct()\n{\n    $this-&gt;middleware('api');\n}\n</code></pre>\n<p>我们的客户端需要通过密码授权的方式来认证，我们需要在<code>ApiController</code>中重写<code>AuthenticatesUsers</code>部分功能函数来实现整个完整的授权流程,在这里我们调用Passport提供的<code>oauth/token</code>接口：</p>\n<pre><code>//调用认证接口获取授权码\nprotected function authenticateClient(Request $request)\n{\n    $credentials = $this-&gt;credentials($request);\n\n    $data = $request-&gt;all();\n\n    $request-&gt;request-&gt;add([\n        'grant_type' =&gt; $data['grant_type'],\n        'client_id' =&gt; $data['client_id'],\n        'client_secret' =&gt; $data['client_secret'],\n        'username' =&gt; $credentials['phone'],\n        'password' =&gt; $credentials['password'],\n        'scope' =&gt; ''\n    ]);\n\n    $proxy = Request::create(\n        'oauth/token',\n        'POST'\n    );\n\n    $response = \\Route::dispatch($proxy);\n\n    return $response;\n}\n//以下为重写部分\nprotected function authenticated(Request $request)\n{\n    return $this-&gt;authenticateClient($request);\n}\n\nprotected function sendLoginResponse(Request $request)\n{\n    $this-&gt;clearLoginAttempts($request);\n\n    return $this-&gt;authenticated($request);\n}\n\nprotected function sendFailedLoginResponse(Request $request)\n{\n    $msg = $request['errors'];\n    $code = $request['code'];\n    return $this-&gt;failed($msg,$code);\n}\n</code></pre>\n<p>在这里我们会遇到一个问题，官方文档中没有提及，就是我们要如何使用自定的用户名进行授权，找寻源码，其实在<code>Laravel\\Passport\\Bridge\\UserRepository.php</code>的<code>getUserEntityByUserCredentials()</code>函数中会看到这段代码：</p>\n<pre><code>if (method_exists($model, 'findForPassport')) {\n    $user = (new $model)-&gt;findForPassport($username);\n} else {\n    $user = (new $model)-&gt;where('email', $username)-&gt;first();\n}\n</code></pre>\n<p>我们只需要在我们配置在config/auth.php的模型中添加这段代码就可以完成自定义授权用户名：</p>\n<pre><code> public function findForPassport($username) {\n    return $this-&gt;where('phone', $username)-&gt;first();\n}\n</code></pre>\n<p>这样一个授权流程基本完成，接下来创建一个<code>Api/LoginController</code>:</p>\n<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\ApiController;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\User;                \\\\User.php我移动到了Models目录\nuse Validator;\n\nclass LoginController extends ApiController\n{\n    // 登录用户名标示为phone字段\n    public function username()\n    {\n        return 'phone';\n    }\n    //登录接口，调用了ApiController中一些其他函数succeed\\failed，上文未提及，用于接口格式化输出\n    public function login(Request $request)\n{\n    $validator = Validator::make($request-&gt;all(), [\n        'phone'    =&gt; 'required|exists:users',\n        'password' =&gt; 'required|between:6,32',\n        ]);\n\n        if ($validator-&gt;fails()) {\n        $request-&gt;request-&gt;add([\n            'errors' =&gt; $validator-&gt;errors()-&gt;toArray(),\n            'code' =&gt; 401,\n            ]);                     \n        return $this-&gt;sendFailedLoginResponse($request);\n    }\n\n    $credentials = $this-&gt;credentials($request);\n\n    if ($this-&gt;guard('api')-&gt;attempt($credentials, $request-&gt;has('remember'))) {\n        return $this-&gt;sendLoginResponse($request);\n    }\n\n    return $this-&gt;failed('login failed',401);\n    }\n}\n</code></pre>\n<h2>构建路由</h2>\n<p>最后<code>routes/api.php</code>中加入我们需要的路由：</p>\n<pre><code>Route::group([\n    'prefix'=&gt;'/v1',\n    'middleware' =&gt; ['api']\n], function () {\n    Route::post('/user/login','Api\\LoginController@login');\n});\n</code></pre>\n<h2>测试</h2>\n<p>最后在postmen中调用接口：\n<img src=\"http://static.zybuluo.com/thankuu/gcptj01cj4f3zk3mtrnbm82k/image_1b2543doiq521a5c17lh1h3k14ve9.png\" alt=\"image_1b2543doiq521a5c17lh1h3k14ve9.png-81.7kB\"></p>\n<p>结果正确返回。</p>\n"},{"title":"搭建Django应用（一）","_content":"## python安装\n作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过`brew`安装：\n\n        $ brew install python3\n        $ python3 -V\n        Python 3.5.1   显示版本号表明安装成功\n\n\n或者通过安装`pyenv`来在多版本中来回切换\n\n        $ brew install pyenv\n更多使用方法可以参考：http://seisman.info/python-pyenv.html\n\n## Django安装\nDjango要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：\n\n    $pip install Django\n如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：\n\n    $pip3 install Django\n\n如果之前安装了Django就需要卸载之前版本，再重新安装。\n\n## 验证\n安装完成以后可以通过执行python，运行以下命令来验证安装：\n\n    >>> import django\n    >>> print(django.get_version())\n    1.8\n\n看到返回版本号证明你的Django已经安装成功了。\n\n\n","source":"_posts/搭建Django应用（一）.md","raw":"---\ntitle: \"搭建Django应用（一）\"\ntags:\n    - python\n    - Django\n\n---\n## python安装\n作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过`brew`安装：\n\n        $ brew install python3\n        $ python3 -V\n        Python 3.5.1   显示版本号表明安装成功\n\n\n或者通过安装`pyenv`来在多版本中来回切换\n\n        $ brew install pyenv\n更多使用方法可以参考：http://seisman.info/python-pyenv.html\n\n## Django安装\nDjango要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：\n\n    $pip install Django\n如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：\n\n    $pip3 install Django\n\n如果之前安装了Django就需要卸载之前版本，再重新安装。\n\n## 验证\n安装完成以后可以通过执行python，运行以下命令来验证安装：\n\n    >>> import django\n    >>> print(django.get_version())\n    1.8\n\n看到返回版本号证明你的Django已经安装成功了。\n\n\n","slug":"搭建Django应用（一）","published":1,"date":"2016-08-15T06:55:09.000Z","updated":"2016-08-15T06:55:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civtcm88t0005rp9k2rwbxosn","content":"<h2>python安装</h2>\n<p>作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过<code>brew</code>安装：</p>\n<pre><code>    $ brew install python3\n    $ python3 -V\n    Python 3.5.1   显示版本号表明安装成功\n</code></pre>\n<p>或者通过安装<code>pyenv</code>来在多版本中来回切换</p>\n<pre><code>    $ brew install pyenv\n</code></pre>\n<p>更多使用方法可以参考：http://seisman.info/python-pyenv.html</p>\n<h2>Django安装</h2>\n<p>Django要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：</p>\n<pre><code>$pip install Django\n</code></pre>\n<p>如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：</p>\n<pre><code>$pip3 install Django\n</code></pre>\n<p>如果之前安装了Django就需要卸载之前版本，再重新安装。</p>\n<h2>验证</h2>\n<p>安装完成以后可以通过执行python，运行以下命令来验证安装：</p>\n<pre><code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; print(django.get_version())\n1.8\n</code></pre>\n<p>看到返回版本号证明你的Django已经安装成功了。</p>\n","excerpt":"","more":"<h2>python安装</h2>\n<p>作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过<code>brew</code>安装：</p>\n<pre><code>    $ brew install python3\n    $ python3 -V\n    Python 3.5.1   显示版本号表明安装成功\n</code></pre>\n<p>或者通过安装<code>pyenv</code>来在多版本中来回切换</p>\n<pre><code>    $ brew install pyenv\n</code></pre>\n<p>更多使用方法可以参考：http://seisman.info/python-pyenv.html</p>\n<h2>Django安装</h2>\n<p>Django要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：</p>\n<pre><code>$pip install Django\n</code></pre>\n<p>如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：</p>\n<pre><code>$pip3 install Django\n</code></pre>\n<p>如果之前安装了Django就需要卸载之前版本，再重新安装。</p>\n<h2>验证</h2>\n<p>安装完成以后可以通过执行python，运行以下命令来验证安装：</p>\n<pre><code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; print(django.get_version())\n1.8\n</code></pre>\n<p>看到返回版本号证明你的Django已经安装成功了。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civtcm88i0001rp9kg5crz3ke","tag_id":"civtcm88p0004rp9kd30u7jv6","_id":"civtcm88x0009rp9k5q44po4a"},{"post_id":"civtcm88i0001rp9kg5crz3ke","tag_id":"civtcm88v0006rp9k4zsod1x8","_id":"civtcm88x000arp9kknpb6yle"},{"post_id":"civtcm88i0001rp9kg5crz3ke","tag_id":"civtcm88w0007rp9k9qy3rldb","_id":"civtcm88z000crp9kocvfs1ju"},{"post_id":"civtcm88n0003rp9k65k9pf92","tag_id":"civtcm88x0008rp9kcliuog5p","_id":"civtcm890000erp9kf261jjq0"},{"post_id":"civtcm88n0003rp9k65k9pf92","tag_id":"civtcm88p0004rp9kd30u7jv6","_id":"civtcm890000frp9kzksr2qhg"},{"post_id":"civtcm88t0005rp9k2rwbxosn","tag_id":"civtcm88z000drp9kvkadmcfx","_id":"civtcm890000hrp9kyigzxqjk"},{"post_id":"civtcm88t0005rp9k2rwbxosn","tag_id":"civtcm890000grp9k3f0mfffa","_id":"civtcm890000irp9k69y0ecd7"}],"Tag":[{"name":"php","_id":"civtcm88p0004rp9kd30u7jv6"},{"name":"安全","_id":"civtcm88v0006rp9k4zsod1x8"},{"name":"CodeIgniter","_id":"civtcm88w0007rp9k9qy3rldb"},{"name":"laravel","_id":"civtcm88x0008rp9kcliuog5p"},{"name":"python","_id":"civtcm88z000drp9kvkadmcfx"},{"name":"Django","_id":"civtcm890000grp9k3f0mfffa"}]}}