{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/img/post-default-min.jpg","path":"img/post-default-min.jpg","modified":0,"renderable":0},{"_id":"source/img/coffee.png","path":"img/coffee.png","modified":0,"renderable":0},{"_id":"source/img/avatar-hux.jpg","path":"img/avatar-hux.jpg","modified":0,"renderable":0},{"_id":"source/img/post-default.jpg","path":"img/post-default.jpg","modified":0,"renderable":0},{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e73fc8558bdbbd575e02409fc4319b797c8ef416","modified":1471846587000},{"_id":"source/CNAME","hash":"a2da06df65f4723be82327cd1a8ca0069d1ab11c","modified":1471244109000},{"_id":"source/README.md","hash":"f1c093b659a97197b0e7ddbf7ec0ff45b5e5addf","modified":1471244109000},{"_id":"source/favicon.ico","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1471244109000},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1473045181000},{"_id":"themes/Anisina/_config.yml","hash":"9d4d11a53c46502845f5f11c3ba2ccfa86b194fa","modified":1473045181000},{"_id":"themes/Anisina/README.md","hash":"feab09dfaa2212528428d850bb89db7b670113ba","modified":1473045181000},{"_id":"source/About/index.md","hash":"915fbbd465194fbf59542e31b458ed7917f83cbd","modified":1473047658000},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1473045181000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1470987881000},{"_id":"source/_posts/PHP安全 - SQL防注入.md","hash":"8853e2f4b5a108be995bc0b908ffc8639aabd4a6","modified":1471244109000},{"_id":"source/Tags/index.md","hash":"83108e31eea7bbff8f4fbeda872dc65cdc51e5f7","modified":1471247021000},{"_id":"source/_posts/搭建Django应用（一）.md","hash":"828751fa09034fe8bef6dcb65b979678ad0b0852","modified":1471244109000},{"_id":"source/img/post-default-min.jpg","hash":"c8c57d7b0a8dd3380f40871b002c8c01f73545ad","modified":1471244109000},{"_id":"source/img/coffee.png","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1471244109000},{"_id":"themes/Anisina/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473045181000},{"_id":"source/img/avatar-hux.jpg","hash":"9a057b22a964f4d03519bbdb2dc9e360d37ee4e4","modified":1471244109000},{"_id":"source/img/post-default.jpg","hash":"77906a3be30936d775246a09cb70bccdb6eb7710","modified":1471244109000},{"_id":"themes/Anisina/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1473045181000},{"_id":"themes/Anisina/.git/config","hash":"d6c4362f9cacc8e3cc7270df3077e27c9bbcdf53","modified":1473045181000},{"_id":"themes/Anisina/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1473045174000},{"_id":"themes/Anisina/.git/index","hash":"090c408e1f839c859b895c314c7138de42625f22","modified":1473045181000},{"_id":"themes/Anisina/.git/packed-refs","hash":"bcce8ad571848fc3de0bf64bd38ba22eb87dca8d","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1473045181000},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1473045181000},{"_id":"themes/Anisina/layout/index.ejs","hash":"9e910a5b1d6ad8a70102f7acee10f4de1f46b077","modified":1473045181000},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1473045181000},{"_id":"themes/Anisina/layout/layout.ejs","hash":"9d3d82a707b107f42db34ef5a8016693da2be742","modified":1473045181000},{"_id":"themes/Anisina/layout/page.ejs","hash":"8dfd89e0ec31b609bbb5b32d18ebbd362e863630","modified":1473047889000},{"_id":"themes/Anisina/layout/tags.ejs","hash":"9a5bbfcd8d729d20819423c156db24d33c0cab33","modified":1473045181000},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"aa52ac74cff84caa85563e98c65bdd089c6d0cba","modified":1473045181000},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1473045181000},{"_id":"themes/Anisina/layout/post.ejs","hash":"7fb92dded77dddd0393f8fd92cef7bb6123728a6","modified":1473045181000},{"_id":"themes/Anisina/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1473045174000},{"_id":"themes/Anisina/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1473045174000},{"_id":"themes/Anisina/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1473045174000},{"_id":"themes/Anisina/.git/logs/HEAD","hash":"970da02f23f47cb4504ab177d4aeb1b064953034","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"223a29b0154c2dcc5f8a6b6fee67ef78ead266ad","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"07fd0760db89b12b0005209747c611b9ba8110db","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1473045181000},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1473045181000},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"b99f671000c3c42e57043f218a4096194591b0e7","modified":1473045181000},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1473045181000},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1473045181000},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1473045181000},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1473045181000},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1473045181000},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1473045181000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1473045181000},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1473045181000},{"_id":"themes/Anisina/.git/refs/heads/master","hash":"91107a360c7ec009bed6a4147a9bfcb18df6ee7f","modified":1473045181000},{"_id":"themes/Anisina/.git/objects/pack/pack-34bc65b13a6d4613ea712c2ac03d9cda3db0f78c.idx","hash":"cfb6f357f588227837dcac22ca440807ef03ae6d","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1473045181000},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1473045181000},{"_id":"themes/Anisina/.git/logs/refs/heads/master","hash":"970da02f23f47cb4504ab177d4aeb1b064953034","modified":1473045181000},{"_id":"themes/Anisina/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1473045181000},{"_id":"themes/Anisina/.git/logs/refs/remotes/origin/HEAD","hash":"970da02f23f47cb4504ab177d4aeb1b064953034","modified":1473045181000},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1473045181000},{"_id":"themes/Anisina/.git/objects/pack/pack-34bc65b13a6d4613ea712c2ac03d9cda3db0f78c.pack","hash":"d999c31509f411dd37556443ff07c20845d9e807","modified":1473045181000},{"_id":"public/atom.xml","hash":"c018f19af0c61ddf3b6aaaa10c9601cf8d6dc864","modified":1473047902613},{"_id":"public/sitemap.xml","hash":"8326a16aa9510fd056431cf9e7dab144711df27f","modified":1473047902614},{"_id":"public/About/index.html","hash":"a116fe77829e2fcafb7748e4aee04ec0181aa6f5","modified":1473047902620},{"_id":"public/Tags/index.html","hash":"59486d8d7e31e2c18f2991a8ce16e5bc36442837","modified":1473047902620},{"_id":"public/2016/08/15/搭建Django应用（一）/index.html","hash":"eb708959368511a549dfb3dceea3c5e60885b920","modified":1473047902620},{"_id":"public/archives/index.html","hash":"de9c03e4ca54fcb9c946b9956829cf7c56257ac8","modified":1473047902620},{"_id":"public/archives/2016/index.html","hash":"b5043a426a104414157d8103978aa9dd7dd1d7cd","modified":1473047902620},{"_id":"public/archives/2016/08/index.html","hash":"623fe3ec800741cd38b9e89fd829a3ff4b8ab250","modified":1473047902620},{"_id":"public/tags/php/index.html","hash":"e9a28713fdb06ebb3f49f23deb1edfedbbd8a262","modified":1473047902620},{"_id":"public/tags/安全/index.html","hash":"1425a01db750c3006a460a5dcea1c38dc665fe94","modified":1473047902620},{"_id":"public/tags/CodeIgniter/index.html","hash":"042943fb778f45cf50ffadfc293375eb995f5616","modified":1473047902620},{"_id":"public/tags/python/index.html","hash":"c371949427cb3d067e62eb3d2f0df188ffee3957","modified":1473047902620},{"_id":"public/tags/Django/index.html","hash":"2ae287bcd4fc80f21b9fcc8a1522ea347e93640a","modified":1473047902622},{"_id":"public/2016/08/15/PHP安全 - SQL防注入/index.html","hash":"d9704b85bed8b77de5cef7b0fb67ea853621e402","modified":1473047902623},{"_id":"public/index.html","hash":"b68f6b2b58d3a0c74b7227f96aacd1c7532b6ea6","modified":1473047902623},{"_id":"public/CNAME","hash":"a2da06df65f4723be82327cd1a8ca0069d1ab11c","modified":1473047902627},{"_id":"public/README.md","hash":"f1c093b659a97197b0e7ddbf7ec0ff45b5e5addf","modified":1473047902627},{"_id":"public/favicon.ico","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1473047902628},{"_id":"public/img/post-default-min.jpg","hash":"c8c57d7b0a8dd3380f40871b002c8c01f73545ad","modified":1473047902628},{"_id":"public/img/coffee.png","hash":"4c7cb0f50d2f51f0c53fbf8f6196578664b264e8","modified":1473047902628},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1473047902628},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1473047902628},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1473047902629},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1473047902629},{"_id":"public/img/post-default.jpg","hash":"77906a3be30936d775246a09cb70bccdb6eb7710","modified":1473047902742},{"_id":"public/img/avatar-hux.jpg","hash":"9a057b22a964f4d03519bbdb2dc9e360d37ee4e4","modified":1473047902742},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1473047902742},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1473047902744},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1473047902744},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1473047902744},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1473047902744},{"_id":"public/css/blog-style.css","hash":"b99f671000c3c42e57043f218a4096194591b0e7","modified":1473047902744},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1473047902744},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1473047902744},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1473047902744},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1473047902745}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"page","date":"2016-09-05T02:37:52.000Z","_content":"## Thankuu(Wu Sheng Kai)\n### 渣渣web程序猿一枚（广州）\n## 技能树：\n\n    php      ---  laravel|codeigniter\n    js       ---  vue.js|node|express\n    python   ---  Django\n    other    ---  Docker|Nginx|Apache\n","source":"About/index.md","raw":"---\ntitle: About\nlayout: page\ndate: 2016-09-05 10:37:52\n---\n## Thankuu(Wu Sheng Kai)\n### 渣渣web程序猿一枚（广州）\n## 技能树：\n\n    php      ---  laravel|codeigniter\n    js       ---  vue.js|node|express\n    python   ---  Django\n    other    ---  Docker|Nginx|Apache\n","updated":"2016-09-05T03:54:18.000Z","path":"About/index.html","comments":1,"_id":"cispiormf0000g29k8f6gwj7u","content":"<h2>Thankuu(Wu Sheng Kai)</h2>\n<h3>渣渣web程序猿一枚（广州）</h3>\n<h2>技能树：</h2>\n<pre><code>php      ---  laravel|codeigniter\njs       ---  vue.js|node|express\npython   ---  Django\nother    ---  Docker|Nginx|Apache\n</code></pre>\n","excerpt":"","more":"<h2>Thankuu(Wu Sheng Kai)</h2>\n<h3>渣渣web程序猿一枚（广州）</h3>\n<h2>技能树：</h2>\n<pre><code>php      ---  laravel|codeigniter\njs       ---  vue.js|node|express\npython   ---  Django\nother    ---  Docker|Nginx|Apache\n</code></pre>\n"},{"title":"Tags","layout":"tags","date":"2016-08-15T07:42:50.000Z","_content":"","source":"Tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\ndate: 2016-08-15 15:42:50\n---","updated":"2016-08-15T07:43:41.000Z","path":"Tags/index.html","comments":1,"_id":"cispiormw0001g29k2z1tg8z2","content":"","excerpt":"","more":""}],"Post":[{"title":"PHP安全 - SQL防注入","_content":"### 1、表单校验\n这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以`CodeIgniter`举例,官方给的示例是：\n\n\n    public function index()\n    {\n        $this->load->helper(array('form', 'url'));\n\n        $this->load->library('form_validation');\n\n        $this->form_validation->set_rules('username', 'Username', 'callback_username_check');\n\n    $this->form_validation->set_rules('password', 'Password', 'required');\n\n        $this->form_validation->set_rules('passconf', 'Password Confirmation', 'required');\n\n    $this->form_validation->set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n        if ($this->form_validation->run() == FALSE)\n    {\n        $this->load->view('myform');\n    }\n    else\n    {\n        $this->load->view('formsuccess');\n        }\n    }\n\n这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。\n\n### 2、过滤特殊符号\n在所有攻击中，可以通过对表单数据过滤特殊符号` \\ , ' , \" `来预防SQL注入攻击。假设我们可以通过这样一个链接`http://dev.com/index.php?user_name=thankuu`向服务器请求这个用户的信息，如果`username`是合法的，那么服务器会执行这样的SQL语句：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n\n但是，如果我们在向服务器请求的内容中加入这样的内容：`thankuu' UNION SELECT username,password FROM table.user-- `，那么服务器最终会执行的SQL语句将会变为：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n\n执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。\n\n为了防范这种方式的注入以及插入`<script>`脚本代码，我们可以在php代码中使用`addslashes`函数，将以上特殊符号进行转意，并将原有SQL语句：\n\n\n    SELECT * FROM table WHERE var={$var};\n\n替换成\n\n    SELECT * FROM table WHERE var='{$var}';\n\n我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成`\\\\,\\',\\\"`,，所以想要执行的注入攻击就会失效。\n\n### 3、绑定变量，使用预编译语句\nMySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：\n\n\n    $sql = \"SELECT * FROM table WHERE var=? and var2=?\";\n\n    $result = $this->db->query($sql,array($array1,$array2))->result_array();\n\n更多使用方法可以参考官方使用手册。\n\n","source":"_posts/PHP安全 - SQL防注入.md","raw":"---\ntitle: \"PHP安全 - SQL防注入\"\ntags:\n    - php\n    - 安全\n    - CodeIgniter\n\n---\n### 1、表单校验\n这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以`CodeIgniter`举例,官方给的示例是：\n\n\n    public function index()\n    {\n        $this->load->helper(array('form', 'url'));\n\n        $this->load->library('form_validation');\n\n        $this->form_validation->set_rules('username', 'Username', 'callback_username_check');\n\n    $this->form_validation->set_rules('password', 'Password', 'required');\n\n        $this->form_validation->set_rules('passconf', 'Password Confirmation', 'required');\n\n    $this->form_validation->set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n        if ($this->form_validation->run() == FALSE)\n    {\n        $this->load->view('myform');\n    }\n    else\n    {\n        $this->load->view('formsuccess');\n        }\n    }\n\n这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。\n\n### 2、过滤特殊符号\n在所有攻击中，可以通过对表单数据过滤特殊符号` \\ , ' , \" `来预防SQL注入攻击。假设我们可以通过这样一个链接`http://dev.com/index.php?user_name=thankuu`向服务器请求这个用户的信息，如果`username`是合法的，那么服务器会执行这样的SQL语句：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n\n但是，如果我们在向服务器请求的内容中加入这样的内容：`thankuu' UNION SELECT username,password FROM table.user-- `，那么服务器最终会执行的SQL语句将会变为：\n\n    SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n\n执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。\n\n为了防范这种方式的注入以及插入`<script>`脚本代码，我们可以在php代码中使用`addslashes`函数，将以上特殊符号进行转意，并将原有SQL语句：\n\n\n    SELECT * FROM table WHERE var={$var};\n\n替换成\n\n    SELECT * FROM table WHERE var='{$var}';\n\n我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成`\\\\,\\',\\\"`,，所以想要执行的注入攻击就会失效。\n\n### 3、绑定变量，使用预编译语句\nMySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：\n\n\n    $sql = \"SELECT * FROM table WHERE var=? and var2=?\";\n\n    $result = $this->db->query($sql,array($array1,$array2))->result_array();\n\n更多使用方法可以参考官方使用手册。\n\n","slug":"PHP安全 - SQL防注入","published":1,"date":"2016-08-15T06:55:09.000Z","updated":"2016-08-15T06:55:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cispiormw0002g29kyb411ik7","content":"<h3>1、表单校验</h3>\n<p>这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以<code>CodeIgniter</code>举例,官方给的示例是：</p>\n<pre><code>public function index()\n{\n    $this-&gt;load-&gt;helper(array('form', 'url'));\n\n    $this-&gt;load-&gt;library('form_validation');\n\n    $this-&gt;form_validation-&gt;set_rules('username', 'Username', 'callback_username_check');\n\n$this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required');\n\n    $this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required');\n\n$this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n    if ($this-&gt;form_validation-&gt;run() == FALSE)\n{\n    $this-&gt;load-&gt;view('myform');\n}\nelse\n{\n    $this-&gt;load-&gt;view('formsuccess');\n    }\n}\n</code></pre>\n<p>这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。</p>\n<h3>2、过滤特殊符号</h3>\n<p>在所有攻击中，可以通过对表单数据过滤特殊符号<code>\\ , ' , &quot;</code>来预防SQL注入攻击。假设我们可以通过这样一个链接<code>http://dev.com/index.php?user_name=thankuu</code>向服务器请求这个用户的信息，如果<code>username</code>是合法的，那么服务器会执行这样的SQL语句：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n</code></pre>\n<p>但是，如果我们在向服务器请求的内容中加入这样的内容：<code>thankuu' UNION SELECT username,password FROM table.user--</code>，那么服务器最终会执行的SQL语句将会变为：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n</code></pre>\n<p>执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。</p>\n<p>为了防范这种方式的注入以及插入<code>&lt;script&gt;</code>脚本代码，我们可以在php代码中使用<code>addslashes</code>函数，将以上特殊符号进行转意，并将原有SQL语句：</p>\n<pre><code>SELECT * FROM table WHERE var={$var};\n</code></pre>\n<p>替换成</p>\n<pre><code>SELECT * FROM table WHERE var='{$var}';\n</code></pre>\n<p>我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成<code>\\\\,\\',\\&quot;</code>,，所以想要执行的注入攻击就会失效。</p>\n<h3>3、绑定变量，使用预编译语句</h3>\n<p>MySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：</p>\n<pre><code>$sql = &quot;SELECT * FROM table WHERE var=? and var2=?&quot;;\n\n$result = $this-&gt;db-&gt;query($sql,array($array1,$array2))-&gt;result_array();\n</code></pre>\n<p>更多使用方法可以参考官方使用手册。</p>\n","excerpt":"","more":"<h3>1、表单校验</h3>\n<p>这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以<code>CodeIgniter</code>举例,官方给的示例是：</p>\n<pre><code>public function index()\n{\n    $this-&gt;load-&gt;helper(array('form', 'url'));\n\n    $this-&gt;load-&gt;library('form_validation');\n\n    $this-&gt;form_validation-&gt;set_rules('username', 'Username', 'callback_username_check');\n\n$this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required');\n\n    $this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required');\n\n$this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n    if ($this-&gt;form_validation-&gt;run() == FALSE)\n{\n    $this-&gt;load-&gt;view('myform');\n}\nelse\n{\n    $this-&gt;load-&gt;view('formsuccess');\n    }\n}\n</code></pre>\n<p>这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。</p>\n<h3>2、过滤特殊符号</h3>\n<p>在所有攻击中，可以通过对表单数据过滤特殊符号<code>\\ , ' , &quot;</code>来预防SQL注入攻击。假设我们可以通过这样一个链接<code>http://dev.com/index.php?user_name=thankuu</code>向服务器请求这个用户的信息，如果<code>username</code>是合法的，那么服务器会执行这样的SQL语句：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu`;\n</code></pre>\n<p>但是，如果我们在向服务器请求的内容中加入这样的内容：<code>thankuu' UNION SELECT username,password FROM table.user--</code>，那么服务器最终会执行的SQL语句将会变为：</p>\n<pre><code>SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;\n</code></pre>\n<p>执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。</p>\n<p>为了防范这种方式的注入以及插入<code>&lt;script&gt;</code>脚本代码，我们可以在php代码中使用<code>addslashes</code>函数，将以上特殊符号进行转意，并将原有SQL语句：</p>\n<pre><code>SELECT * FROM table WHERE var={$var};\n</code></pre>\n<p>替换成</p>\n<pre><code>SELECT * FROM table WHERE var='{$var}';\n</code></pre>\n<p>我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成<code>\\\\,\\',\\&quot;</code>,，所以想要执行的注入攻击就会失效。</p>\n<h3>3、绑定变量，使用预编译语句</h3>\n<p>MySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：</p>\n<pre><code>$sql = &quot;SELECT * FROM table WHERE var=? and var2=?&quot;;\n\n$result = $this-&gt;db-&gt;query($sql,array($array1,$array2))-&gt;result_array();\n</code></pre>\n<p>更多使用方法可以参考官方使用手册。</p>\n"},{"title":"搭建Django应用（一）","_content":"## python安装\n作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过`brew`安装：\n\n        $ brew install python3\n        $ python3 -V\n        Python 3.5.1   显示版本号表明安装成功\n\n\n或者通过安装`pyenv`来在多版本中来回切换\n\n        $ brew install pyenv\n更多使用方法可以参考：http://seisman.info/python-pyenv.html\n\n## Django安装\nDjango要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：\n\n    $pip install Django\n如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：\n\n    $pip3 install Django\n\n如果之前安装了Django就需要卸载之前版本，再重新安装。\n\n## 验证\n安装完成以后可以通过执行python，运行以下命令来验证安装：\n\n    >>> import django\n    >>> print(django.get_version())\n    1.8\n\n看到返回版本号证明你的Django已经安装成功了。\n\n\n","source":"_posts/搭建Django应用（一）.md","raw":"---\ntitle: \"搭建Django应用（一）\"\ntags:\n    - python\n    - Django\n\n---\n## python安装\n作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过`brew`安装：\n\n        $ brew install python3\n        $ python3 -V\n        Python 3.5.1   显示版本号表明安装成功\n\n\n或者通过安装`pyenv`来在多版本中来回切换\n\n        $ brew install pyenv\n更多使用方法可以参考：http://seisman.info/python-pyenv.html\n\n## Django安装\nDjango要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：\n\n    $pip install Django\n如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：\n\n    $pip3 install Django\n\n如果之前安装了Django就需要卸载之前版本，再重新安装。\n\n## 验证\n安装完成以后可以通过执行python，运行以下命令来验证安装：\n\n    >>> import django\n    >>> print(django.get_version())\n    1.8\n\n看到返回版本号证明你的Django已经安装成功了。\n\n\n","slug":"搭建Django应用（一）","published":1,"date":"2016-08-15T06:55:09.000Z","updated":"2016-08-15T06:55:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cispiorn00003g29kb22itjuw","content":"<h2>python安装</h2>\n<p>作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过<code>brew</code>安装：</p>\n<pre><code>    $ brew install python3\n    $ python3 -V\n    Python 3.5.1   显示版本号表明安装成功\n</code></pre>\n<p>或者通过安装<code>pyenv</code>来在多版本中来回切换</p>\n<pre><code>    $ brew install pyenv\n</code></pre>\n<p>更多使用方法可以参考：http://seisman.info/python-pyenv.html</p>\n<h2>Django安装</h2>\n<p>Django要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：</p>\n<pre><code>$pip install Django\n</code></pre>\n<p>如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：</p>\n<pre><code>$pip3 install Django\n</code></pre>\n<p>如果之前安装了Django就需要卸载之前版本，再重新安装。</p>\n<h2>验证</h2>\n<p>安装完成以后可以通过执行python，运行以下命令来验证安装：</p>\n<pre><code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; print(django.get_version())\n1.8\n</code></pre>\n<p>看到返回版本号证明你的Django已经安装成功了。</p>\n","excerpt":"","more":"<h2>python安装</h2>\n<p>作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过<code>brew</code>安装：</p>\n<pre><code>    $ brew install python3\n    $ python3 -V\n    Python 3.5.1   显示版本号表明安装成功\n</code></pre>\n<p>或者通过安装<code>pyenv</code>来在多版本中来回切换</p>\n<pre><code>    $ brew install pyenv\n</code></pre>\n<p>更多使用方法可以参考：http://seisman.info/python-pyenv.html</p>\n<h2>Django安装</h2>\n<p>Django要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：</p>\n<pre><code>$pip install Django\n</code></pre>\n<p>如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/\n使用时带上python版本号执行：</p>\n<pre><code>$pip3 install Django\n</code></pre>\n<p>如果之前安装了Django就需要卸载之前版本，再重新安装。</p>\n<h2>验证</h2>\n<p>安装完成以后可以通过执行python，运行以下命令来验证安装：</p>\n<pre><code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; print(django.get_version())\n1.8\n</code></pre>\n<p>看到返回版本号证明你的Django已经安装成功了。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cispiormw0002g29kyb411ik7","tag_id":"cispiorn50004g29khxmfxq3l","_id":"cispiorne0009g29ksd1dllbh"},{"post_id":"cispiormw0002g29kyb411ik7","tag_id":"cispiorn90005g29kluaq567t","_id":"cispiorne000ag29k779fxo6z"},{"post_id":"cispiormw0002g29kyb411ik7","tag_id":"cispiorna0006g29knpw89sby","_id":"cispiorne000bg29k4363o4s7"},{"post_id":"cispiorn00003g29kb22itjuw","tag_id":"cispiorna0007g29knaxybi09","_id":"cispiorne000cg29kfbyuy28r"},{"post_id":"cispiorn00003g29kb22itjuw","tag_id":"cispiorna0008g29kqb6wbf9w","_id":"cispiornf000dg29kiaetyyth"}],"Tag":[{"name":"php","_id":"cispiorn50004g29khxmfxq3l"},{"name":"安全","_id":"cispiorn90005g29kluaq567t"},{"name":"CodeIgniter","_id":"cispiorna0006g29knpw89sby"},{"name":"python","_id":"cispiorna0007g29knaxybi09"},{"name":"Django","_id":"cispiorna0008g29kqb6wbf9w"}]}}