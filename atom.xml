<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thankuu</title>
  <subtitle>Life is coding,coding for my life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thankuu.me/"/>
  <updated>2016-11-22T05:08:00.000Z</updated>
  <id>http://thankuu.me/</id>
  
  <author>
    <name>Thankuu (Retro)</name>
    <email>thankuu.me@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel 5.3中使用Laravel Passport构建后端授权认证API</title>
    <link href="http://thankuu.me/2016/11/22/Laravel%205.3%E4%B8%AD%E4%BD%BF%E7%94%A8Laravel%20Passport%E6%9E%84%E5%BB%BA%E5%90%8E%E7%AB%AF%E6%8E%88%E6%9D%83%E8%AE%A4%E8%AF%81API/"/>
    <id>http://thankuu.me/2016/11/22/Laravel 5.3中使用Laravel Passport构建后端授权认证API/</id>
    <published>2016-11-22T04:19:32.000Z</published>
    <updated>2016-11-22T05:08:00.000Z</updated>
    
    <content type="html">&lt;p&gt;Laravel在5.3中引入了新的官方OAuth扩展Laravel Passport，之前在5.1/5.2时一直是用dingo+jwt这一套来构建后端api，最近正好要构建新项目，想着试试官方这一个拓展如何。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;官方文档中有完整的安装调用过程，使用composer：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;composer require laravel/passport
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;像使用其他组件一样，我们需要在&lt;code&gt;config/app/php&lt;/code&gt;的&lt;code&gt;providers&lt;/code&gt;数组中注册Passport：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Laravel\Passport\PassportServiceProvider::class,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后我们需要执行&lt;code&gt;migrate&lt;/code&gt;创建相关的客户端数据表和令牌数据表,和&lt;code&gt;passport:install&lt;/code&gt;来生成一些加密秘钥等，这些在官方文档中都有详细介绍。&lt;/p&gt;
&lt;h2&gt;构建认证函数&lt;/h2&gt;
&lt;p&gt;官方文档中针对如何简单使用做了初步介绍，下面我试着构造一个完整的客户端授权流程，首先创建&lt;code&gt;ApiController&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php artisen make:controller Apicontroller
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;ApiController&lt;/code&gt;中引入&lt;code&gt;AuthenticatesUsers&lt;/code&gt;模块：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Http\Request;

class ApiController extends Controller
{
    use  AuthenticatesUsers;

public function __construct()
{
    $this-&amp;gt;middleware(&#39;api&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们的客户端需要通过密码授权的方式来认证，我们需要在&lt;code&gt;ApiController&lt;/code&gt;中重写&lt;code&gt;AuthenticatesUsers&lt;/code&gt;部分功能函数来实现整个完整的授权流程,在这里我们调用Passport提供的&lt;code&gt;oauth/token&lt;/code&gt;接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//调用认证接口获取授权码
protected function authenticateClient(Request $request)
{
    $credentials = $this-&amp;gt;credentials($request);

    $data = $request-&amp;gt;all();

    $request-&amp;gt;request-&amp;gt;add([
        &#39;grant_type&#39; =&amp;gt; $data[&#39;grant_type&#39;],
        &#39;client_id&#39; =&amp;gt; $data[&#39;client_id&#39;],
        &#39;client_secret&#39; =&amp;gt; $data[&#39;client_secret&#39;],
        &#39;username&#39; =&amp;gt; $credentials[&#39;phone&#39;],
        &#39;password&#39; =&amp;gt; $credentials[&#39;password&#39;],
        &#39;scope&#39; =&amp;gt; &#39;&#39;
    ]);

    $proxy = Request::create(
        &#39;oauth/token&#39;,
        &#39;POST&#39;
    );

    $response = \Route::dispatch($proxy);

    return $response;
}
//以下为重写部分
protected function authenticated(Request $request)
{
    return $this-&amp;gt;authenticateClient($request);
}

protected function sendLoginResponse(Request $request)
{
    $this-&amp;gt;clearLoginAttempts($request);

    return $this-&amp;gt;authenticated($request);
}

protected function sendFailedLoginResponse(Request $request)
{
    $msg = $request[&#39;errors&#39;];
    $code = $request[&#39;code&#39;];
    return $this-&amp;gt;failed($msg,$code);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这里我们会遇到一个问题，官方文档中没有提及，就是我们要如何使用自定的用户名进行授权，找寻源码，其实在&lt;code&gt;Laravel\Passport\Bridge\UserRepository.php&lt;/code&gt;的&lt;code&gt;getUserEntityByUserCredentials()&lt;/code&gt;函数中会看到这段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (method_exists($model, &#39;findForPassport&#39;)) {
    $user = (new $model)-&amp;gt;findForPassport($username);
} else {
    $user = (new $model)-&amp;gt;where(&#39;email&#39;, $username)-&amp;gt;first();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们只需要在我们配置在config/auth.php的模型中添加这段代码就可以完成自定义授权用户名：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; public function findForPassport($username) {
    return $this-&amp;gt;where(&#39;phone&#39;, $username)-&amp;gt;first();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样一个授权流程基本完成，接下来创建一个&lt;code&gt;Api/LoginController&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\ApiController;
use Illuminate\Http\Request;
use App\Models\User;                \\User.php我移动到了Models目录
use Validator;

class LoginController extends ApiController
{
    // 登录用户名标示为phone字段
    public function username()
    {
        return &#39;phone&#39;;
    }
    //登录接口，调用了ApiController中一些其他函数succeed\failed，上文未提及，用于接口格式化输出
    public function login(Request $request)
{
    $validator = Validator::make($request-&amp;gt;all(), [
        &#39;phone&#39;    =&amp;gt; &#39;required|exists:users&#39;,
        &#39;password&#39; =&amp;gt; &#39;required|between:6,32&#39;,
        ]);

        if ($validator-&amp;gt;fails()) {
        $request-&amp;gt;request-&amp;gt;add([
            &#39;errors&#39; =&amp;gt; $validator-&amp;gt;errors()-&amp;gt;toArray(),
            &#39;code&#39; =&amp;gt; 401,
            ]);                     
        return $this-&amp;gt;sendFailedLoginResponse($request);
    }

    $credentials = $this-&amp;gt;credentials($request);

    if ($this-&amp;gt;guard(&#39;api&#39;)-&amp;gt;attempt($credentials, $request-&amp;gt;has(&#39;remember&#39;))) {
        return $this-&amp;gt;sendLoginResponse($request);
    }

    return $this-&amp;gt;failed(&#39;login failed&#39;,401);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;构建路由&lt;/h2&gt;
&lt;p&gt;最后&lt;code&gt;routes/api.php&lt;/code&gt;中加入我们需要的路由：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Route::group([
    &#39;prefix&#39;=&amp;gt;&#39;/v1&#39;,
    &#39;middleware&#39; =&amp;gt; [&#39;api&#39;]
], function () {
    Route::post(&#39;/user/login&#39;,&#39;Api\LoginController@login&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;p&gt;最后在postmen中调用接口：
&lt;img src=&quot;http://static.zybuluo.com/thankuu/gcptj01cj4f3zk3mtrnbm82k/image_1b2543doiq521a5c17lh1h3k14ve9.png&quot; alt=&quot;image_1b2543doiq521a5c17lh1h3k14ve9.png-81.7kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;结果正确返回。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Laravel在5.3中引入了新的官方OAuth扩展Laravel Passport，之前在5.1/5.2时一直是用dingo+jwt这一套来构建后端api，最近正好要构建新项目，想着试试官方这一个拓展如何。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;官方文档中有完整的安装调用
    
    </summary>
    
    
      <category term="laravel" scheme="http://thankuu.me/tags/laravel/"/>
    
      <category term="php" scheme="http://thankuu.me/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP安全 - SQL防注入</title>
    <link href="http://thankuu.me/2016/08/15/PHP%E5%AE%89%E5%85%A8%20-%20SQL%E9%98%B2%E6%B3%A8%E5%85%A5/"/>
    <id>http://thankuu.me/2016/08/15/PHP安全 - SQL防注入/</id>
    <published>2016-08-15T06:55:09.000Z</published>
    <updated>2016-09-22T06:56:25.000Z</updated>
    
    <content type="html">&lt;h3&gt;1、表单校验&lt;/h3&gt;
&lt;p&gt;这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以&lt;code&gt;CodeIgniter&lt;/code&gt;举例,官方给的示例是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public function index()
{
    $this-&amp;gt;load-&amp;gt;helper(array(&#39;form&#39;, &#39;url&#39;));

    $this-&amp;gt;load-&amp;gt;library(&#39;form_validation&#39;);

    $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;username&#39;, &#39;Username&#39;, &#39;callback_username_check&#39;);

$this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;password&#39;, &#39;Password&#39;, &#39;required&#39;);

    $this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;passconf&#39;, &#39;Password Confirmation&#39;, &#39;required&#39;);

$this-&amp;gt;form_validation-&amp;gt;set_rules(&#39;email&#39;, &#39;Email&#39;, &#39;required|is_unique[users.email]&#39;);

    if ($this-&amp;gt;form_validation-&amp;gt;run() == FALSE)
{
    $this-&amp;gt;load-&amp;gt;view(&#39;myform&#39;);
}
else
{
    $this-&amp;gt;load-&amp;gt;view(&#39;formsuccess&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种方式的目的就是将前端传过来的数据进行初步校验，校验的方式一般有特殊校验（邮箱，密码，日期）和一般校验（是否必填）等等，通过这个方式可以对前端的数据进行格式以及类型的初步校验，检验其变量格式和类型，（预格式化数据）是否包含HTML代码等，对数据进行过滤。&lt;/p&gt;
&lt;h3&gt;2、过滤特殊符号&lt;/h3&gt;
&lt;p&gt;在所有攻击中，可以通过对表单数据过滤特殊符号&lt;code&gt;\ , &#39; , &amp;quot;&lt;/code&gt;来预防SQL注入攻击。假设我们可以通过这样一个链接&lt;code&gt;http://dev.com/index.php?user_name=thankuu&lt;/code&gt;向服务器请求这个用户的信息，如果&lt;code&gt;username&lt;/code&gt;是合法的，那么服务器会执行这样的SQL语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT uid,user_info FROM table.user WHERE username=`thankuu`;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，如果我们在向服务器请求的内容中加入这样的内容：&lt;code&gt;thankuu&#39; UNION SELECT username,password FROM table.user--&lt;/code&gt;，那么服务器最终会执行的SQL语句将会变为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT uid,user_info FROM table.user WHERE username=`thankuu` UNION SELECT username,password FROM table.user-- ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行的结果就是将所有用户的用户名和对应的密码全部输出返回。同理，我们也可以使用类似的方法跳过网站的用户密码验证，只用知道正确的用户名就可以登录网站。&lt;/p&gt;
&lt;p&gt;为了防范这种方式的注入以及插入&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;脚本代码，我们可以在php代码中使用&lt;code&gt;addslashes&lt;/code&gt;函数，将以上特殊符号进行转意，并将原有SQL语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table WHERE var={$var};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;替换成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table WHERE var=&#39;{$var}&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们的SQL语句中带有单引号，所以要想用户执行注入时就必须反引号，但是我们在接受数据时，将原有数据中的特殊符号进行了转意，那么用户插入的特殊符号将会转意成&lt;code&gt;\\,\&#39;,\&amp;quot;&lt;/code&gt;,，所以想要执行的注入攻击就会失效。&lt;/p&gt;
&lt;h3&gt;3、绑定变量，使用预编译语句&lt;/h3&gt;
&lt;p&gt;MySQL的mysqli驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，现代PHP框架中，使用ORM（关系数据模型）都基本具备了预编译。CodeIgniter的AR防注入能力还是很不错的,使用ORM可以有效防止注入，如果执行的SQL较为复杂，需要书写原生SQL时可以采用参数绑定的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sql = &amp;quot;SELECT * FROM table WHERE var=? and var2=?&amp;quot;;

$result = $this-&amp;gt;db-&amp;gt;query($sql,array($array1,$array2))-&amp;gt;result_array();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多使用方法可以参考官方使用手册。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3&gt;1、表单校验&lt;/h3&gt;
&lt;p&gt;这部分其实和安全关系不大，个人理解表单校验只是为了防止用户在前端直接调用接口来绕过前端的表单验证。而通常将针对获取到的表单进行校验，这部分功能目前一般在所有框架中都具备有，以&lt;code&gt;CodeIgniter&lt;/code&gt;举例,官方给的示例是
    
    </summary>
    
    
      <category term="php" scheme="http://thankuu.me/tags/php/"/>
    
      <category term="安全" scheme="http://thankuu.me/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="CodeIgniter" scheme="http://thankuu.me/tags/CodeIgniter/"/>
    
  </entry>
  
  <entry>
    <title>搭建Django应用（一）</title>
    <link href="http://thankuu.me/2016/08/15/%E6%90%AD%E5%BB%BADjango%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://thankuu.me/2016/08/15/搭建Django应用（一）/</id>
    <published>2016-08-15T06:55:09.000Z</published>
    <updated>2016-08-15T06:55:09.000Z</updated>
    
    <content type="html">&lt;h2&gt;python安装&lt;/h2&gt;
&lt;p&gt;作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过&lt;code&gt;brew&lt;/code&gt;安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ brew install python3
    $ python3 -V
    Python 3.5.1   显示版本号表明安装成功
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者通过安装&lt;code&gt;pyenv&lt;/code&gt;来在多版本中来回切换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $ brew install pyenv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多使用方法可以参考：http://seisman.info/python-pyenv.html&lt;/p&gt;
&lt;h2&gt;Django安装&lt;/h2&gt;
&lt;p&gt;Django要通过pip安装，pip是python中的一个包管理工具，可以通过它安装python的软件包，mac系统自带的python已经安装好了pip，可以直接通过他进行安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$pip install Django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果安装了多版本，需要使用pip可以参考官方文档：https://docs.python.org/3/installing/
使用时带上python版本号执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$pip3 install Django
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果之前安装了Django就需要卸载之前版本，再重新安装。&lt;/p&gt;
&lt;h2&gt;验证&lt;/h2&gt;
&lt;p&gt;安装完成以后可以通过执行python，运行以下命令来验证安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import django
&amp;gt;&amp;gt;&amp;gt; print(django.get_version())
1.8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到返回版本号证明你的Django已经安装成功了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2&gt;python安装&lt;/h2&gt;
&lt;p&gt;作为一个Python Web框架，Django需要Python 。 它适用Python 2.7、3.2、3.3和3.4。osx自带了python2.7版本，如果需要安装更高版本的python，可以通过&lt;code&gt;brew&lt;/code&gt;安装
    
    </summary>
    
    
      <category term="python" scheme="http://thankuu.me/tags/python/"/>
    
      <category term="Django" scheme="http://thankuu.me/tags/Django/"/>
    
  </entry>
  
</feed>
